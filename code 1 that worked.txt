const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));

const getInfo = async () => {
  await sleep(1000);

  const currentUrl = window.location.href;
  const currentUrlParts = currentUrl.split('/');
  const movieSlug = currentUrlParts[currentUrlParts.length - 2];
  console.log('Movie slug found:', movieSlug);

  const friendsLinkElement = document.querySelector('h2.section-heading a[href*="/friends/film/"]');
  if (!friendsLinkElement) {
    console.error('Friends link not found');
    return null;
  }

  const friendsLink = friendsLinkElement.getAttribute('href');
  console.log('Friends link found:', friendsLink);

  const parts = friendsLink.split('/');
  if (parts.length < 3) {
    console.error('Friends link does not have the expected format');
    return null;
  }

  const username = parts[1];
  console.log('Username found:', username);

  return [username, movieSlug];
};

const getFriendsRatings = async (url) => {
  try {
    const response = await fetch(url);
    const text = await response.text();
    const parser = new DOMParser();
    const doc = parser.parseFromString(text, 'text/html');
    
    const ratings = [];
    doc.querySelectorAll('.rating').forEach(ratingElement => {
      const ratingClass = ratingElement.getAttribute('class');
      if (ratingClass) {
        const rating = parseInt(ratingClass.split('-')[1], 10);
        if (!isNaN(rating)) {
          ratings.push(rating);
        }
      }
    });

    return ratings;
  } catch (error) {
    console.error('Error fetching friends ratings:', error);
    return [];
  }
};

// Function to create and inject the custom rating display
const injectRatingDisplay = (average, ratings, movieSlug) => {
  const ratingCounts = Array(5).fill(0);
  ratings.forEach(rating => {
    if (rating >= 1 && rating <= 5) {
      ratingCounts[rating - 1]++;
    }
  });

  const ratingHtml = `
    <section class="section ratings-histogram-chart">
      <h2 class="section-heading">
        <a href="/film/${movieSlug}/ratings/" class="" title="">Friends' Ratings</a>
      </h2>
      <a href="/film/${movieSlug}/fans/" class="all-link more-link">${ratings.length} fans</a>
      <span class="average-rating">
        <a href="/film/${movieSlug}/ratings/" class="tooltip display-rating" data-original-title="Average rating: ${average.toFixed(1)} based on ${ratings.length} ratings">${average.toFixed(1)}</a>
      </span>
      <div class="rating-histogram clear rating-histogram-exploded">
        ${ratingCounts.map((count, i) => `
          <li class="rating-histogram-bar" style="width: ${Math.min(count * 20, 100)}%; left: ${i * 16}px">
            <a href="/film/${movieSlug}/ratings/rated/${i + 1}/by/rating/" class="ir tooltip" data-original-title="${count} ${i + 1}-star rating${count > 1 ? 's' : ''} (${Math.round(count / ratings.length * 100)}%)">
              ${count} ${i + 1}-star rating${count > 1 ? 's' : ''}
            </a>
          </li>
        `).join('')}
        <span class="rating-green rating-green-tiny rating-5">
          <span class="rating rated-10">★★★★★</span>
        </span>
      </div>
    </section>
  `;
  
  const sidebar = document.querySelector('.sidebar');
  if (sidebar) {
    sidebar.innerHTML += ratingHtml;
  } else {
    console.error('Sidebar not found');
  }
};

// Main function to get information and process ratings
const main = async () => {
  const info = await getInfo();
  if (info) {
    const [username, movieSlug] = info;
    const friendsUrl = `https://letterboxd.com/${username}/friends/film/${movieSlug}/`;
    console.log('Friends URL:', friendsUrl);

    const ratings = await getFriendsRatings(friendsUrl);
    console.log('Ratings:', ratings);

    if (ratings.length > 0) {
      const average = ratings.reduce((sum, rating) => sum + rating, 0) / ratings.length;
      injectRatingDisplay(average, ratings, movieSlug);
    } else {
      console.log('No ratings found');
    }
  } else {
    console.error('Could not retrieve username or movie slug');
  }
};

// Run the main function
main();
